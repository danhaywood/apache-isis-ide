<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- This file is part of Dopus                                              -->

<!-- Dopus is free software; you can redistribute it and/or modify           -->
<!-- it under the terms of the GNU General Public License as published by    -->
<!-- the Free Software Foundation; either version 2 of the License, or       -->
<!-- (at your option) any later version.                                     -->

<!-- Dopus is distributed in the hope that it will be useful,                -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of          -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           -->
<!-- GNU General Public License for more details.                            -->

<!-- You should have received a copy of the GNU General Public License       -->
<!-- along with Dopus; if not, write to the Free Software                    -->
<!-- Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA -->

<!-- (c) 2006 by AGYNAMIX                                                    -->
<!-- You can download the latest version of this software at                 -->
<!-- http://www.agynamix.de                                                  -->

<project name="Dopus common definitions" >
  
  <path id="saxon.classpath">
    <fileset dir="${system.saxon.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${system.catalog-resolver.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement path="${system.catalog-resolver.dir}"/>
  </path>

  <path id="xfc.classpath">
    <fileset dir="${system.dir}/xfc">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  
  <!-- The XMLCatalog to resolve the Docbook DTD's. If you add a new version you need to add an entry here!
       Currently there are two mechanisms to resolve DTD's: Catalog-Resolver which is used by Saxon and
       this one, used by xmlvalidate. This should be consolidated into only one mechanism, preferrably
       XMLCatalog as this is easier to handle. -->
  <xmlcatalog id="system.xmlcatalog">
    <dtd publicId="-//OASIS//DTD DocBook XML V4.4//EN"   location="${system.dir}/docbook-dtd/4.4/docbookx.dtd"/>
    <dtd publicId="-//OASIS//DTD DocBook XML V4.5//EN"   location="${system.dir}/docbook-dtd/4.5/docbookx.dtd"/>
    <dtd publicId="-//Norman Walsh//DTD Slides V3.4//EN" location="${system.dir}/docbook-slides/schema/dtd/slides.dtd"/>
  </xmlcatalog>      

  <target name="init">
    <trycatch><try><antcall target="local-pre-init" /></try><catch></catch></trycatch>

    <mkdir dir="${project.dir.output}/${project.output.mode}"/>
    <delete includeemptydirs="true" >
      <fileset dir="${project.dir.output}/${project.output.mode}" >
        <include name="**/*" />
        <exclude name=".project"/>
        <exclude name=".classpath"/>
        <exclude name="build.properties"/>
        <exclude name="META-INF/MANIFEST.MF"/>
      </fileset>
    </delete>

    <!-- check only with ANT utilities -->
    <loadfile property="input.file.to.check" srcFile="${project.dir.input}/${project.input.file}.xml" />
    <if><contains string="${input.file.to.check}" substring="!DOCTYPE book" casesensitive="false"/>
      <then>
        <echo message="Processing a BOOK document" />
        <property name="input.doctype" value="book" />
      </then>
    	<elseif><contains string="${input.file.to.check}" substring="!DOCTYPE slides" casesensitive="false"/>
      	<then>
          <echo message="Processing a SLIDES document" />
          <property name="input.doctype" value="slides" />
        </then>
    	</elseif>
    	<else>
        <echo message="Processing NOT a BOOK nor a SLIDES document" />
        <property name="input.doctype" value="generic" />
      </else>
    </if>

    <trycatch><try><antcall target="local-post-init" /></try><catch></catch></trycatch>
  </target>

  <target name="copy-resources" >
	  <copy todir="${project.dir.output}/${project.output.mode}/contents/resource" failonerror="false">
      <fileset dir="${project.dir.input}/resource" />
    </copy>
  </target>

  <target name="copy-common-files">
    <if><equals arg1="${input.doctype}" arg2="slides"/>
      <then>
        <copy todir="${project.dir.output}/${project.output.mode}">
          <fileset dir="${system.custom-xsl.dir}/common-files-slides" />
        </copy>
        <copy failonerror="true" tofile="${project.dir.output}/${project.output.mode}/style.css" 
              file="${project.custom-cfg.dir}/style-common.css" />
        <copy overwrite="true" failonerror="false" tofile="${project.dir.output}/${project.output.mode}/style.css" 
              file="${project.custom-cfg.dir}/style-${project.output.mode}.css" />
      </then>
      <else> 	
        <copy todir="${project.dir.output}/${project.output.mode}">
          <fileset dir="${system.custom-xsl.dir}/common-files" />
        </copy>
        <copy failonerror="true" tofile="${project.dir.output}/${project.output.mode}/style.css" 
              file="${project.custom-cfg.dir}/style-common.css" />
        <copy overwrite="true" failonerror="false" tofile="${project.dir.output}/${project.output.mode}/style.css" 
              file="${project.custom-cfg.dir}/style-${project.output.mode}.css" />
      </else>
    </if>
  </target>
  
  <target name="cleanup-tmp-files">
    <delete quiet="true" failonerror="false" file="${project.dir.output}/${project.output.mode}/${project.input.file}.docbook"/>
  </target>
  
  <target name="cleanup-style-files">
    <delete quiet="true" failonerror="false" file="${project.dir.output}/${project.output.mode}/${project.input.file}.fo"/>
    <delete quiet="true" failonerror="false" file="${project.dir.output}/${project.output.mode}/style.css"/>
    <delete quiet="true" failonerror="false" includeemptydirs="true" >
      <fileset dir="${project.dir.output}/${project.output.mode}/images" />
    </delete>
  </target>
  
  
  <macrodef name="xslt-runner">
    <attribute name="dir" default="${project.dir.output}/${project.output.mode}" />
    <attribute name="inputfile" default="${project.dir.output}/${project.output.mode}/${project.input.file}.docbook" />
    <attribute name="outputfile" default="" />
    <attribute name="stylesheet"/>
    <attribute name="maxmemory" default="${xslt.maxmemory.default}" />
    <element name="xslt-argset" optional="true"/>
    <sequential>
      <java fork="true" dir="@{dir}" failonerror="true" maxmemory="@{maxmemory}" classname="com.icl.saxon.StyleSheet">
        <classpath refid="saxon.classpath" />
        <jvmarg line="-Dhttp.proxyHost=${http.proxyHost}" />
        <jvmarg line="-Dhttp.proxyPort=${http.proxyPort}" />        
        <jvmarg line="-Djavax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
        <jvmarg line="-Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl" />
        <jvmarg line="-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration" />
        <arg line="-x org.apache.xml.resolver.tools.ResolvingXMLReader" />
        <arg line="-y org.apache.xml.resolver.tools.ResolvingXMLReader" />
        <arg line="-r org.apache.xml.resolver.tools.CatalogResolver" />
        <arg line="@{outputfile}" />
        <arg value="@{inputfile}" />
        <arg value="@{stylesheet}" />
        <xslt-argset/>
      </java>
    </sequential>
  </macrodef>

  <macrodef name="fop-runner">
    <attribute name="dir" default="${project.dir.output}/${project.output.mode}" />
    <attribute name="inputfile" default="${project.dir.output}/${project.output.mode}/${project.input.file}.fo" />
    <attribute name="outputfile" default="${project.dir.output}/${project.output.mode}/${project.input.file}.pdf" />
    <attribute name="maxmemory" default="${fop.maxmemory.default}" />
    <sequential>
      <java fork="true" dir="@{dir}" failonerror="true" maxmemory="@{maxmemory}" classname="org.apache.fop.apps.Fop">
        <classpath>
          <fileset dir="${system.fop.dir}/build">
            <include name="**/*.jar"/>
          </fileset>
          <fileset dir="${system.fop.dir}/lib">
            <include name="**/*.jar"/>
          </fileset>
        </classpath>
        <jvmarg line="-Dhttp.proxyHost=${http.proxyHost}" />
        <jvmarg line="-Dhttp.proxyPort=${http.proxyPort}" />
        <arg line="-c &quot;${system.fop.dir}/conf/userconfig.xml&quot;" />
        <arg line="-fo &quot;@{inputfile}&quot;" />
        <arg line="-pdf &quot;@{outputfile}&quot;" />
      </java>
    </sequential>
  </macrodef>

  <!-- resolve-xinclude creates the .docbook file that conatains all the XInclude'd elements -->
  <target name="resolve-xinclude" depends="init">
    <trycatch><try><antcall target="local-pre-resolve-xinclude" /></try><catch></catch></trycatch>

    <xslt-runner inputfile="${project.dir.input}/${project.input.file}.xml"
                 outputfile="-o &quot;${project.dir.output}/${project.output.mode}/${project.input.file}.docbook&quot;"
                 stylesheet="${system.custom-xsl.dir}/resolve-xinclude.xsl" />

    <antcall target="substitute-properties" />
    
    <trycatch><try><antcall target="local-post-resolve-xinclude" /></try><catch></catch></trycatch>
  </target>
  
  <target name="substitute-properties">
    <if><equals arg1="${substitute.properties}" arg2="yes"/><then>
      <typedef resource="foundrylogic/vpp/typedef.properties" />
      <taskdef resource="foundrylogic/vpp/taskdef.properties" />    
      
      <vppcopy overwrite="true" file="${project.dir.output}/${project.output.mode}/${project.input.file}.docbook"
            tofile="${project.dir.output}/${project.output.mode}/${project.input.file}.docbook2">
      </vppcopy>
      <move  overwrite="yes" tofile="${project.dir.output}/${project.output.mode}/${project.input.file}.docbook" 
             file="${project.dir.output}/${project.output.mode}/${project.input.file}.docbook2"/>
      </then>
    </if>
  </target>

</project>
